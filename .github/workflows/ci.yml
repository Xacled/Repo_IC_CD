name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build y test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Limpiar caché y módulos previos
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json

      - run: npm install

      - name: Test
        run: npm run test --if-present --coverage

      - run: npm run build

  deploy:
    name: Desplegar en Azure Static Web Apps
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: "Production"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Para PRs automáticos
          action: "upload"
          app_location: "/" # Cambia si tu app está en otro subdirectorio
          output_location: "dist" # Carpeta generada por tu build

      - name: Notificar a Slack
        if: failure() || success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":rocket: *CI/CD completado en Azure*\n*Status:* ${{ job.status }}\n*Repositorio:* ${{ github.repository }}\n*Commit:* ${{ github.sha }}\n*Autor:* ${{ github.actor }}",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
